function pos_order_graph_models(instance, module){ //module is instance.point_of_sale
    var module   = instance.point_of_sale;
    var QWeb = instance.web.qweb;
	var _t = instance.web._t;

    var round_di = instance.web.round_decimals;
    var round_pr = instance.web.round_precision;

    module.PosModel = module.PosModel.extend({
        models: (function() {
            var base_posmodel_model = module.PosModel.prototype.models;
            base_posmodel_model.push(
            {
                model:  'res.partner',
                fields: ['name','street','city','state_id','country_id','vat','phone','zip','mobile','email','ean13','write_date','ident_type','ident_num'],
                domain: [['customer','=',true]],
                loaded: function(self,partners){
                    self.partners = partners;
                    self.db.add_partners(partners);
                },
            },
            );
            return base_posmodel_model;
	    })(),

   /*     push_and_invoice_order: function(order){
            var self = this;
            var invoiced = new $.Deferred();

            if(!order.get_client()){
                invoiced.reject('error-no-client');
                return invoiced;
            }

            var order_id = this.db.add_order(order.export_as_JSON());

            this.flush_mutex.exec(function(){
                var done = new $.Deferred(); // holds the mutex

                // send the order to the server
                // we have a 30 seconds timeout on this push.
                // FIXME: if the server takes more than 30 seconds to accept the order,
                // the client will believe it wasn't successfully sent, and very bad
                // things will happen as a duplicate will be sent next time
                // so we must make sure the server detects and ignores duplicated orders

                var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true});

                transfer.fail(function(){
                    invoiced.reject('error-transfer');
                    done.reject();
                });
                // on success, get the order id generated by the server
                transfer.pipe(function(order_server_id){

                    // generate the pdf and download it
                    self.pos_widget.do_action('pos_order_graph.pos_reporte',{additional_context:{
                        active_ids:order_server_id,
                    }});

                    invoiced.resolve();
                    done.resolve();
                });
                return done;

            });

            return invoiced;
        },*/
    });
}
